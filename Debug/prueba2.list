
prueba2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000190  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000fb  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006c  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00001580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000088  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800033c 	.word	0x0800033c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800033c 	.word	0x0800033c

08000204 <__main>:
.globl __main

__main:

    // Habilitar reloj para GPIOA
    ldr r0, =RCC_AHB1ENR  // Cargar la dirección de RCC_AHB1ENR en r0
 8000204:	4822      	ldr	r0, [pc, #136]	@ (8000290 <delay_loop+0x6>)
    ldr r1, [r0]          // Cargar el valor en la dirección encontrada en r0 en r1
 8000206:	6801      	ldr	r1, [r0, #0]
    orr r1, r1, #GPIOA_EN // Establecer el bit para habilitar el reloj de GPIOA
 8000208:	f041 0101 	orr.w	r1, r1, #1
    str r1, [r0]          // Almacenar el valor modificado de nuevo en RCC_AHB1ENR
 800020c:	6001      	str	r1, [r0, #0]

    // Configurar GPIOA pines como salida
    ldr r0, =GPIOA_MODER  // Cargar la dirección de GPIOA_MODER en r0
 800020e:	4821      	ldr	r0, [pc, #132]	@ (8000294 <delay_loop+0xa>)
    ldr r1, [r0]          // Cargar el valor en la dirección encontrada en r0 en r1
 8000210:	6801      	ldr	r1, [r0, #0]
    orr r1, r1, #MODER0_OUT
 8000212:	f041 0101 	orr.w	r1, r1, #1
    orr r1, r1, #MODER1_OUT
 8000216:	f041 0104 	orr.w	r1, r1, #4
    orr r1, r1, #MODER8_OUT
 800021a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
    orr r1, r1, #MODER9_OUT
 800021e:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    orr r1, r1, #MODER4_OUT
 8000222:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
    orr r1, r1, #MODER5_OUT
 8000226:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
    orr r1, r1, #MODER6_OUT
 800022a:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
    orr r1, r1, #MODER7_OUT
 800022e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
    str r1, [r0]
 8000232:	6001      	str	r1, [r0, #0]

08000234 <loop>:

loop:
    // Estado 1: LEDs 1-7 encendidos, LED 8 apagado
    ldr r0, =GPIOA_ODR
 8000234:	4818      	ldr	r0, [pc, #96]	@ (8000298 <delay_loop+0xe>)
    ldr r1, =(LED0_ON | LED1_ON | LED8_ON | LED9_ON | LED4_ON | LED5_ON | LED6_ON)
 8000236:	f240 3173 	movw	r1, #883	@ 0x373
    str r1, [r0]
 800023a:	6001      	str	r1, [r0, #0]
    bl delay
 800023c:	f000 f824 	bl	8000288 <delay>

    // Estado 2: LEDs 1-6 encendidos, LEDs 7-8 apagados
    ldr r1, =(LED0_ON | LED1_ON | LED8_ON | LED9_ON | LED4_ON | LED5_ON)
 8000240:	f240 3133 	movw	r1, #819	@ 0x333
    str r1, [r0]
 8000244:	6001      	str	r1, [r0, #0]
    bl delay
 8000246:	f000 f81f 	bl	8000288 <delay>

    // Estado 3: LEDs 1-5 encendidos, LEDs 6-8 apagados
    ldr r1, =(LED0_ON | LED1_ON | LED8_ON | LED9_ON | LED4_ON)
 800024a:	f240 3113 	movw	r1, #787	@ 0x313
    str r1, [r0]
 800024e:	6001      	str	r1, [r0, #0]
    bl delay
 8000250:	f000 f81a 	bl	8000288 <delay>

    // Estado 4: LEDs 1-4 encendidos, LEDs 5-8 apagados
    ldr r1, =(LED0_ON | LED1_ON | LED8_ON | LED9_ON)
 8000254:	f240 3103 	movw	r1, #771	@ 0x303
    str r1, [r0]
 8000258:	6001      	str	r1, [r0, #0]
    bl delay
 800025a:	f000 f815 	bl	8000288 <delay>

    // Estado 5: LEDs 1-3 encendidos, LEDs 4-8 apagados
    ldr r1, =(LED0_ON | LED1_ON | LED8_ON)
 800025e:	f240 1103 	movw	r1, #259	@ 0x103
    str r1, [r0]
 8000262:	6001      	str	r1, [r0, #0]
    bl delay
 8000264:	f000 f810 	bl	8000288 <delay>

    // Estado 6: LEDs 1-2 encendidos, LEDs 3-8 apagados
    ldr r1, =(LED0_ON | LED1_ON)
 8000268:	f04f 0103 	mov.w	r1, #3
    str r1, [r0]
 800026c:	6001      	str	r1, [r0, #0]
    bl delay
 800026e:	f000 f80b 	bl	8000288 <delay>

    // Estado 7: LED 1 encendido, LEDs 2-8 apagados
    ldr r1, =(LED0_ON)
 8000272:	f04f 0101 	mov.w	r1, #1
    str r1, [r0]
 8000276:	6001      	str	r1, [r0, #0]
    bl delay
 8000278:	f000 f806 	bl	8000288 <delay>

    // Estado 8: Todos los LEDs apagados
    ldr r1, =0
 800027c:	f04f 0100 	mov.w	r1, #0
    str r1, [r0]
 8000280:	6001      	str	r1, [r0, #0]
    bl delay
 8000282:	f000 f801 	bl	8000288 <delay>

    b loop
 8000286:	e7d5      	b.n	8000234 <loop>

08000288 <delay>:

delay:
    ldr r3, =0xE4E1C0   // Cargar el valor de conteo del retraso (aprox. 3 segundos a 16 MHz)
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <delay_loop+0x12>)

0800028a <delay_loop>:
delay_loop:
    subs r3, r3, #1     // Decrementar el contador de retraso
 800028a:	3b01      	subs	r3, #1
    bne delay_loop      // Repetir el bucle si el contador no es cero
 800028c:	d1fd      	bne.n	800028a <delay_loop>
    bx lr               // Retorno de la función de retraso
 800028e:	4770      	bx	lr
    ldr r0, =RCC_AHB1ENR  // Cargar la dirección de RCC_AHB1ENR en r0
 8000290:	40023830 	.word	0x40023830
    ldr r0, =GPIOA_MODER  // Cargar la dirección de GPIOA_MODER en r0
 8000294:	40020000 	.word	0x40020000
    ldr r0, =GPIOA_ODR
 8000298:	40020014 	.word	0x40020014
    ldr r3, =0xE4E1C0   // Cargar el valor de conteo del retraso (aprox. 3 segundos a 16 MHz)
 800029c:	00e4e1c0 	.word	0x00e4e1c0

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	@ (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl __main
 80002d2:	f7ff ff97 	bl	8000204 <__main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	@ (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	@ (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	@ (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
